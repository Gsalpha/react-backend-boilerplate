{"version":3,"sources":["containers/Table.tsx","pages/table-list/index.tsx"],"names":["mapDispatchToProps","dispatch","setPagination","prefix","pagination","setPaginationAction","scope","Table","handlePageChange","page","size","_this$props","_this","props","onChange","current","pageSize","handleSizeChange","_this$props2","_this$props3","this","_this$props4","rest","Object","objectWithoutProperties","react_default","a","createElement","table_default","assign","objectSpread","showSizeChanger","onShowSizeChange","PureComponent","connect","columns","title","dataIndex","render","text","record","status","state","loading","tableList","list","fetchTableList","_ref","useEffect","table_list_Table","dataSource","Prefix"],"mappings":"uOAOMA,EAAqB,SAACC,GAAD,MAAoB,CAC3CC,cAAe,SAACC,EAAgBC,GAAjB,OACXH,EACII,YAAoB,CAChBC,MAAOH,EACPC,mBAcVG,6MACFC,iBAAmB,SAACC,EAAcC,GAA6B,IAAAC,EACfC,EAAKC,MAAzCV,EADmDQ,EACnDR,OAAQD,EAD2CS,EAC3CT,cAAeY,EAD4BH,EAC5BG,SAC/BZ,EAAcC,EAAQ,CAClBY,QAASN,EACTO,SAAUN,IAEdI,OAEJG,iBAAmB,SAACR,EAAcC,GAA6B,IAAAQ,EACfN,EAAKC,MAAzCV,EADmDe,EACnDf,OAAQD,EAD2CgB,EAC3ChB,cAAeY,EAD4BI,EAC5BJ,SAC/BZ,EAAcC,EAAQ,CAClBY,QAAS,EACTC,SAAUN,IAEdI,2FAGmB,IAAAK,EACeC,KAAKP,MAA/BV,EADWgB,EACXhB,QACRD,EAFmBiB,EACHjB,eACFC,EAAQ,CAAEY,QAAS,qCAG5B,IAAAM,EAC6CD,KAAKP,MAA7BT,GADrBiB,EACGlB,OADHkB,EACWP,SADXO,EACqBjB,YAAekB,EADpCC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,oCAEL,OACII,EAAAC,EAAAC,cAAAC,EAAAF,EAAAH,OAAAM,OAAA,GACQP,EADR,CAEIlB,WAAUmB,OAAAO,EAAA,EAAAP,CAAA,CACNQ,iBAAiB,EACjBjB,SAAUM,KAAKZ,iBACfwB,iBAAkBZ,KAAKH,kBACpBb,aAhCA6B,4BCJjB1B,ED4CK2B,YACH,KACAlC,EAFGkC,CAGL3B,GC9CA4B,EAAyC,CAC3C,CACIC,MAAO,2BACPC,UAAW,QAEf,CACID,MAAO,eACPC,UAAW,QAEf,CACID,MAAO,uCACPC,UAAW,UAEf,CACID,MAAO,gBACPE,OAAQ,SAACC,EAAMC,GACX,OAAOA,EAAOC,SAGtB,CACIL,MAAO,uCACPC,UAAW,cAuBJH,sBA3DS,SAACQ,GAAD,MAAsB,CAC1CC,QAASD,EAAMC,QAAQC,UACvBC,KAAMH,EAAME,UAAUC,KACtBzC,WAAYsC,EAAMtC,WAAWwC,YAGN,SAAC3C,GAAD,MAAoB,CAC3C6C,eAAgB,kBAAM7C,EAAS6C,kBAoDpBZ,CApB8B,SAAAa,GAKvC,IAJFD,EAIEC,EAJFD,eACAD,EAGEE,EAHFF,KACAF,EAEEI,EAFFJ,QACAvC,EACE2C,EADF3C,WAKA,OAHA4C,oBAAU,WACNF,KACD,CAACA,IAEArB,EAAAC,EAAAC,cAACsB,EAAD,CACId,QAASA,EACTe,WAAYL,EACZF,QAASA,EACTxC,OAAQgD,IAAOP,UACfxC,WAAYA,EACZU,SAAU","file":"static/js/table-list.bd4ace2f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport { Table as InternalTable } from 'antd'\nimport { connect } from 'react-redux'\nimport { TableProps } from 'antd/lib/table'\nimport { Prefix } from '@/config/prefix'\nimport { setPaginationAction } from '@/stores/ducks/pagination'\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setPagination: (prefix: Prefix, pagination: IPagination) =>\n        dispatch(\n            setPaginationAction({\n                scope: prefix,\n                pagination\n            })\n        )\n})\n\ninterface IProps<T>\n    extends TableProps<T>,\n        ReturnType<typeof mapDispatchToProps> {\n    prefix: Prefix\n    pagination: IPagination\n\n    onChange(): void\n}\n\nclass Table<T> extends PureComponent<IProps<T>> {\n    handlePageChange = (page: number, size: number | undefined) => {\n        const { prefix, setPagination, onChange } = this.props\n        setPagination(prefix, {\n            current: page,\n            pageSize: size\n        })\n        onChange()\n    }\n    handleSizeChange = (page: number, size: number | undefined) => {\n        const { prefix, setPagination, onChange } = this.props\n        setPagination(prefix, {\n            current: 1,\n            pageSize: size\n        })\n        onChange()\n    }\n\n    componentWillUnmount() {\n        const { prefix, setPagination } = this.props\n        setPagination(prefix, { current: 1 })\n    }\n\n    render() {\n        const { prefix, onChange, pagination, ...rest } = this.props\n        return (\n            <InternalTable<T>\n                {...rest}\n                pagination={{\n                    showSizeChanger: true,\n                    onChange: this.handlePageChange,\n                    onShowSizeChange: this.handleSizeChange,\n                    ...pagination\n                }}\n            />\n        )\n    }\n}\n\nexport default function TableContainer<T>() {\n    return connect(\n        null,\n        mapDispatchToProps\n    )(Table as new (props: IProps<T>) => Table<T>)\n}\n","import React, { FunctionComponent, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { AppState } from '@/stores/create'\nimport { fetchTableList } from '@/stores/ducks/table-list'\nimport TableContainr from '@/containers/Table'\nimport { Prefix } from '@/config/prefix'\nimport { ColumnProps } from 'antd/lib/table'\n\nconst mapStateToProps = (state: AppState) => ({\n    loading: state.loading.tableList,\n    list: state.tableList.list,\n    pagination: state.pagination.tableList!\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    fetchTableList: () => dispatch(fetchTableList())\n})\n\nexport interface IProps\n    extends ReturnType<typeof mapStateToProps>,\n        ReturnType<typeof mapDispatchToProps> {}\n\nconst Table = TableContainr<ITableListItem>()\nconst columns: ColumnProps<ITableListItem>[] = [\n    {\n        title: '规则名称',\n        dataIndex: 'name'\n    },\n    {\n        title: '描述',\n        dataIndex: 'desc'\n    },\n    {\n        title: '服务调用次数',\n        dataIndex: 'callNo'\n    },\n    {\n        title: ' 状态',\n        render: (text, record) => {\n            return record.status\n        }\n    },\n    {\n        title: '上次调度事件',\n        dataIndex: 'updatedAt'\n    }\n]\nconst TableList: FunctionComponent<IProps> = ({\n    fetchTableList,\n    list,\n    loading,\n    pagination\n}) => {\n    useEffect(() => {\n        fetchTableList()\n    }, [fetchTableList])\n    return (\n        <Table\n            columns={columns}\n            dataSource={list}\n            loading={loading}\n            prefix={Prefix.tableList}\n            pagination={pagination}\n            onChange={() => {}}\n        />\n    )\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TableList)\n"],"sourceRoot":""}